@page "/Content/Upload"
@using Estral.Host.Web.Features.Pages.Content.Upload
@model UploadModel
@{
    ViewData[Estral.Host.Web.Infra.ViewDataKeys.Title] = "Upload";
}

@section Head {
    <link rel="stylesheet" href="/upload.css" />
}

@if (Model.ErrorMessage is not null)
{
    <p>@Model.ErrorMessage</p>
}

<article id="page">
    <div id="left">
        <p>Preview</p>
        <div id="preview">
            <img src="#" />
        </div>
    </div>

    <form id="right" method="POST" enctype="multipart/form-data" action="/content/upload">
        @Html.AntiForgeryToken()
        <div class="form-group">
            <label for="file">File</label>
            @Html.ValidationMessage(nameof(UploadModel.PostDto.File))
            <input required type="file" id="file" name="file" />
        </div>

        <div class="form-group">
            <label for="title">Title</label>
            @Html.ValidationMessage(nameof(UploadModel.PostDto.Title))
            <input class="input" required type="text" id="title" name="title" maxlength="@UploadModel.TitleMaxLength" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            @Html.ValidationMessage(nameof(UploadModel.PostDto.Description))
            <textarea class="input" id="description" name="description" maxlength="@UploadModel.DescriptionMaxLength"></textarea>
        </div>

        <div class="form-group">
            <label>Tags</label>
            @Html.ValidationMessage(nameof(UploadModel.PostDto.Tags))

            <input class="input" type="text" id="tag-search" maxlength="@Estral.Host.Web.Database.Tag.NameMaxLength" />

            <div>
                <button type="button" class="button" id="tag-search-button">Search tags</button>
                <button type="button" class="button" id="tag-add-button">Add tag</button>
            </div>

            <div id="tag-search-results-container">
                <p>Search results: </p>
                <div id="tag-search-results">

                </div>
            </div>

            <div id="tags-container">
                <p>Added tags: </p>
                <div id="tags"></div>
            </div>

            <script type="module">
                const searchInput = document.querySelector("#tag-search");
                const searchButton = document.querySelector("#tag-search-button");
                const addButton = document.querySelector("#tag-add-button");
                const resultsContainer = document.querySelector("#tag-search-results");
                const tagsContainer = document.querySelector("#tags");

                let abortController = null;

                searchButton.addEventListener("click", async () => {
                    const text = searchInput.value;
                    if (text === "") {
                        return;
                    }

                    if (abortController !== null) {
                        abortController.abort();
                    }

                    abortController = new AbortController();

                    resultsContainer.innerHTML = "";

                    const response = await fetch("/api/tags/search?q=" + encodeURIComponent(text), {
                        headers: {
                            "accept": "application/json"
                        },
                        signal: abortController.signal
                    });

                    // ugh theres probably a race condition here
                    abortController = null;

                    const json = await response.json();

                    // json is [ { id: int, name: string } ]

                    for (let i = 0; i < json.length; i++) {
                        const tag = json[i];

                        if (tagIsAdded(tag.name)) {
                            continue;
                        }

                        const container = document.createElement("div");
                        container.dataset.id = tag.id;

                        const pname = container.appendChild(document.createElement("p"));
                        pname.innerText = tag.name;

                        const button = container.appendChild(document.createElement("button"));
                        button.type = "button";
                        button.innerText = "Add tag";
                        button.classList.add("button");

                        button.addEventListener("click", () => {
                            tryAddTag(tag.name);
                            container.remove();
                        });

                        resultsContainer.appendChild(container);
                    }
                });

                addButton.addEventListener("click", () => {
                    tryAddTag(searchInput.value);
                });

                function tryAddTag(name) {
                    if (!name) {
                        return;
                    }

                    if (tagIsAdded(name)) {
                        return;
                    }

                    if (Array.from(tagsContainer.children).length >= 10) {
                        return;
                    }

                    const container = document.createElement("div");

                    const input = container.appendChild(document.createElement("input"));
                    input.name = "tags";
                    input.value = name;
                    input.type = "hidden";

                    const pname = container.appendChild(document.createElement("p"));
                    pname.innerText = name;

                    const button = container.appendChild(document.createElement("button"));
                    button.type = "button";
                    button.innerText = "Remove";
                    button.classList.add("button");
                    button.addEventListener("click", () => {
                        container.remove();
                    });

                    tagsContainer.appendChild(container);
                }

                function tagIsAdded(name) {
                    const tags = Array.from(tagsContainer.children);
                    for (let i = 0; i < tags.length; i++) {
                        if (tags[i].querySelector("input").value == name) {
                            return true;
                        }
                    }

                    return false;
                }

            </script>
        </div>

        <div>
            <button type="submit" class="button">Upload</button>
        </div>
    </form>
</article>

<script type="module">
    const input = document.getElementById("file");
    const preview = document.querySelector("#preview img");

    input.addEventListener("change", () => {
        const file = input.files[0];
        preview.src = URL.createObjectURL(file);

        // free memory ?
        preview.addEventListener("load", () => URL.revokeObjectURL(preview.src), { once: true });
    });
</script>
